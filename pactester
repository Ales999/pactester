#!/usr/bin/perl

# Copyright (C) 2006 Google Inc.

# pactester is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.

# pactester is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA

use Getopt::Std;
use Socket;
use Sys::Hostname;

use JavaScript::SpiderMonkey;

my %options=();
getopt("puhf",\%options);

my $mypac_file = $options{p} if defined $options{p};
my $url = $options{u} if defined $options{u};
my $host = $options{h} if defined $options{h};
my $urls_list = $options{f} if defined $options{f};

# Find out pac utils path
$pac_utils_path = `dirname $0`;
chomp($pac_utils_path);
$pac_utils_path .= '/pac_utils.js';

sub printusage{
  print <<EOF
  Usage: ./pactester -p www.pac -u http://www.example.com [-h www.example.com]
         ./pactester -p www.pac -f urlslist
EOF
}

# Check for right number of options
if(not defined $mypac_file or (not defined $url and not defined $urls_list)) {
  printusage();
  exit(1);
}

#Don't process $urls_list and $url at the same time
if(defined $urls_list and defined $url) {
  printusage();
  exit(1);
}

my $js_context = JavaScript::SpiderMonkey->new();

# Read javascript files to evaluate

my $oldifs = $/;
undef $/;
open(FILE,$pac_utils_path) || die "Could not open pac_utils.js (Contains functions used by PAC files)\n";
my $nspac = <FILE>;
close(FILE);
open(FILE,$mypac_file) || die "Could not open your pac file: $mypac_file\n";
my $mypac = <FILE>;
close(FILE);
$/ = $oldifs;

$js_context->init();  # Initialize Runtime/Context

#Create a 'write' javascript function that writes to console
$js_context->function_set("write", sub {print @_} );


#Define DNS resolve needed by pac files
sub dns_res {
  $hostname = shift;
  $addr = gethostbyname($hostname);
  if($addr) {return inet_ntoa($addr);}
  else {return null;}
}
$js_context->function_set("dnsResolve", sub {dns_res @_});

sub my_ip {
  $ip = dns_res(Sys::Hostname::hostname);
  if ($ip == null){
    return '127.0.0.1';
  }
  return $ip;
}
$js_context->function_set("myIpAddress", sub {my_ip @_});

# Eval pac_utils.js and our pac file
my $rc = $js_context->eval($nspac);
$rc = $js_context->eval($mypac);
if ($rc != 1) {
  print $@;
  die "Could not evaluate your pac file\n"
}

# Find proxy for a url and a host
sub findproxy {
  $j = shift;
  $url = shift;
  $host = shift;
  $j->property_by_path("pac.url",$url);
  $j->property_by_path("pac.host",$host);
  $j->property_by_path("pac.proxy");
  $rc = $j->eval(q!
    pac.proxy=FindProxyForURL(pac.url,pac.host);
  !);
  if($rc != 1) {print $@; return false;}
}

# Single URL mode
if(defined $url){
  if(defined $url and not defined $host){
    $url =~ /(http[s]|ftp)?\:\/\/([^\/]*).*/;
    $host = $2;
  }
  findproxy($js_context,$url,$host);
  print $js_context->property_get("pac.proxy")."\n";
}

# URL list mode
if(defined $urls_list) {
  open(FILE, $urls_list);
  @urllist = <FILE>;
  foreach (@urllist) {
    chomp;
    /(http[s]?|ftp)\:\/\/([^\/]*).*/;
    findproxy($js_context,$_,$2);
    print $js_context->property_get("pac.proxy")."\n"; 
  }
}
